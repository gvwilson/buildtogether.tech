- key: 90_9_1_rule
  en:
    term: "90-9-1 rule"
    def: >
      90% of people will watch, 9% will speak up, and 1% will actually do things.

- key: active_bystander
  en:
    term: "active bystander"
    def: >
      Someone who takes steps that will make a difference when they observe a
      conflict or unacceptable behavior.

- key: active_listening
  en:
    term: "active listening"
    def: >
      A discussion technique in which people summarize each other's statements
      in order to ensure they have understood them correctly.

- key: actor
  en:
    term: "actor"
    def: >
      Something that can take actions of its own volition.

- key: actual_result
  en:
    term: "actual result (of test)"
    def: >
      The value generated by running code in a test. If this matches the
      [expected result](#expected_result), the test passes; if the two are
      different, the test fails.

- key: agile
  en:
    term: "agile development"
    def: >
      An iterative approach to software development built around several
      short feedback loops rather than long-range planning.

- key: ally
  en:
    term: "ally"
    def: >
      Someone who actively promotes and supports inclusivity.

- key: alpha_geek
  en:
    term: "alpha geek"
    def: >
      A colloquial term for the most technically savvy person in a group.

- key: aih
  ref:
    - nih
  en:
    term: "already invented here syndrome"
    def: >
      An unwillingness to revisit previous design or implementation decisions
      even when new information surfaces.

- key: ae
  en:
    term: "analysis & estimation"
    def: >
      The process of determining what work needs to be done and how long it's
      likely to take so that a prioritized schedule can be drawn up.

- key: analysis_paralysis
  en:
    term: "analysis paralysis"
    def: >
      The inability to make a decision because there is too much information to
      process and/or too many options to consider.

- key: api_key
  en:
    term: "API key"
    def: >
      A unique identifier (usually randomly generated) used to authenticate a
      user or an application.  Most web services require client applications to
      provide an API key at the start of a session or for each transaction.

- key: assertion
  en:
    term: "assertion"
    def: >
      A Boolean expression that must be true at a certain point in a program.
      Assertions may be built into the language (as in Python) or provided as a
      function (as in JavaScript).

- key: adhd
  en:
    term: "attention-deficit/hyperactivity disorder"
    def: >
      A constellation of personality traits that include someone having
      difficulty controlling what they pay attention to and higher-than-average
      physical restlessness.
    acronym: ADHD

- key: auto_completion
  en:
    term: "auto-completion"
    def: >
      A technique implemented by many interactive text interfaces that completes a
      command, variable name, filename, or other text when the tab key is pressed.

- key: automated_program_repair
  en:
    term: "automated program repair"
    def: >
      The use of algorithms to fix bugs, typically by pattern matching or by
      checking common solutions against a test suite.

- key: back_door
  en:
    term: "back door"
    def: >
      A way to access software or data that isn't publicized or that doesn't
      require authentication.  Programmers sometimes create back doors to
      simplify testing or administration, but they are often exploited by
      attackers.

- key: big_bang
  en:
    term: "big-bang integration"
    def: >
      Bringing all of the modules that make up an application together at once
      instead of one by one.  It usually fails.

- key: boehm_curve
  en:
    term: "Boehm Curve"
    def: >
      Shows that the cost of fixing a bug climbs quickly if the bug is found
      later in the software development cycle

- key: branch_git
  en:
    term: "branch"
    def: >
      A snapshot of a version of a [repository](#repository).  Multiple branches
      can capture multiple versions of the same repository.

- key: branch_per_feature_workflow
  en:
    term: "branch-per-feature workflow"
    def: >
      A common strategy for managing work with version control systems in which a
      separate [branch](#branch_git) is created for work on each new feature or
      each bug fix and merged when that work is completed.

- key: breakpoint
  ref:
  - conditional_breakpoint
  en:
    term: "breakpoint"
    def: >
      A point in the program (typically the start of a line) where the debugger
      is to halt the program so its state can be inspected.

- key: brooks_law
  en:
    term: "Brook's Law"
    def: >
      The claim that adding people to a project that's late makes it later
      (because people already on the team must now spend their time getting
      newcomers up to speed).

- key: bsd_license
  en:
    term: "BSD license"
    def: >
      An open software license that requires people to acknowledge the source of
      the software, but does not require derived work to be open; legally
      equivalent to the [MIT License](#mit_license).

- key: build_manager
  en:
    term: "build manager"
    def: >
      A program that keeps track of how files depend on one another and runs commands
      to update any files that are out-of-date.

- key: build_number
  en:
   term: "build number"
   def: >
     A unique serial number associated with a particular compiled and/or
     packaged version of software; the least significant component in
     [semantic versioning](#semantic_versioning).

- key: bullshit
  en:
    term: "bullshit"
    def: >
      Deliberate mistruth or misrepresentation.  Unlike lying, bullshit doesn't
      attempt to conceal the truth, but rather disregards it entirely.

- key: business_rule
  en:
    term: "business rule"
    def: >
      A rule by which business is conducted, such as, "Apply discounts before
      adding sales tax," or, "Library patrons are only allowed to renew a loan
      if no one is waiting for that item."  Software embodies business rules,
      but increasingly business rules are designed around what software can and
      cannot do.

- key: byte_code
  en:
    term: "byte code"
    def: >
      A set of instructions designed to be executed efficiently by an
      [interpreter](#interpreter).

- key: casual_threat
  en:
    term: "casual threat"
    def: >
      A low-effort threat from a relatively unskilled attacker.

- key: catch_exception
  en:
    term: "catch (an exception)"
    def: >
      To accept responsibility for handling an error or other unexpected event.

- key: cc_by
  en:
    term: "CC-BY"
    def: >
      The Creative Commons - Attribution License, which allows copying, derived
      works, and for-profit sale so long as the original source is acknowledged.

- key: cc0
  en:
    term: "CC0"
    def: >
      A shorthand for putting something in the public domain, i.e., imposing no
      restriction of any kind on its use.

- key: centralized_system
  ref:
  - decentralized_system
  en:
    term: "centralized system"
    def: >
      A system in which components communicate with or are controlled by a
      single coordinating component.  Centralized systems are easy to build but
      difficult to scale, and the central component gives them a single point of
      failure.

- key: chaotic_decomposition
  ref:
  - feature_decomposition
  - functional_decomposition
  - modular_decomposition
  - rotating_decomposition
  en:
    term: "chaotic decomposition"
    def: >
      To divide work between team members without planning or coordination.  It
      invariably results in some things not being done, others being done
      multiple times, and the finished products not working together.

- key: chunking
  en:
    term: "chunking"
    def: >
      The act of grouping related concepts together so that they can be stored and
      processed as a single unit.

- key: clone_git
  en:
    term: "clone"
    def: >
      A copy of a [repository](#repository) or the act of making a copy of a
      repository.

- key: code_browser
  en:
    term: "code browser"
    def: >
      A tool for navigating code more quickly than is possible in a conventional
      text editor.  Code browsers typically include the ability to jump to the
      definition of a class or to references to a variable.

- key: code_coverage
  en:
    term: "code coverage"
    def: >
      How much of a program is executed when tests run. This is normally
      reported as a percentage: for example, if 40 out of 50 lines in a file are
      run during testing, those tests have 80% code coverage.

- key: code_metric
  en:
    term: "code metric"
    def: >
      A quantitative measure of some aspect of source code.  The simplest and
      most widely used metric is the number of lines of code (LoC) or the number
      of lines once blank lines and comments are discounted.  Many other metrics
      have been proposed; there is little evidence that any of them are better
      at predicting effort or fault rates than LoC.

- key: code_review
  en:
    term: "code review"
    def: >
      The act of reading source code to find errors, design flaws, opportunities
      for [refactoring](#refactoring), and style violations, or simply to learn
      from it.

- key: cognitive_bias
  en:
    term: "cognitive bias"
    def: >
      A systematic deviation from objectivity.  For example, recency bias leads
      us to place more weight on recent events or impressions than older ones.

- key: cognitive_dimensions
  en:
    term: "cognitive dimensions of notation"
    def: >
      A set of design principles for user interfaces and programming languages.

- key: cognitive_load
  en:
    term: "cognitive load"
    def: >
      The mental effort needed to solve a problem.  Cognitive load theory divides
      this into [intrinsic](#intrinsic_load), [germane](#germane_load), and
      [extraneous](#extraneous_load) load, and holds that people learn fastest
      when germane and extraneous load are reduced.

- key: cognitive_transition
  en:
    term: "cognitive transition"
    def: >
      A change from one way of thinking to another, such as the one that occurs
      as someone goes from being a [novice](#novice) to being a [competent
      practitioner](#competent_practitioner) in some domain.

- key: csv
  en:
    term: comma-separated values
    def: >
      A text format for tabular data in which each record is one row and fields
      are separated by commas. There are many minor variations, particularly
      around how strings are quoted.
    acronym: CSV

- key: commit
  en:
    term: "commit"
    def: >
      The act of saving a set of changes to a database or version control
      [repository](#repository), or the changes saved.

- key: commit_message
  en:
    term: "commit message"
    def: >
      A comment attached to a [commit](#commit) that explains what was done and
      why.

- key: commons
  en:
    term: "commons"
    def: >
      Something managed jointly by a community according to rules they
      themselves have evolved and adopted.

- key: community_of_practice
  en:
    term: "community of practice"
    def: >
      A group of people working together on something who assist and mentor each
      other.

- key: competent_practitioner
  ref:
  - expert
  - novice
  en:
    term: "competent practitioner"
    def: >
      Someone who can do normal tasks in some domain with normal effort under
      normal circumstances.

- key: compiled_language
  en:
    term: "compiled language"
    def: >
      Originally, a language such as C or Fortran that is translated into machine
      instructions for execution. Languages such as Java are also compiled before
      execution, but into [byte code](#byte_code) instead of machine instructions,
      while [interpreted languages](#interpreted_language) like Python are
      compiled to byte code on the fly.

- key: conceptual_architecture
  en:
    term: "conceptual architecture"
    def: >
      The "big picture" view of the things that make up an application and how
      they relate to each other. A system's conceptual architecture may include
      everything from the users and hardware to the class hierarchy.

- key: conditional_breakpoint
  en:
    term: "conditional breakpoint"
    def: >
      A [breakpoint](#breakpoint) that only pauses the program if a
      user-specified condition is met (e.g., if some variable's value is zero).

- key: confirmation_loop
  en:
    term: "confirmation loop"
    def: >
      A feedback loop in which a person does something well because they've had
      opportunities to practice, which leads to them being given more
      opportunities and more practice, thereby "confirming" the original
      decision to give them the work.

- key: conflict_git
  en:
    term: "conflict"
    def: >
      A situation in which incompatible or overlapping changes have been made on
      different [branches](#branch_git) that are now being [merged](#merge_git).

- key: confounding_variables
  en:
    term: "confounding variables"
    def: >
      Something that isn't being measured that can nevertheless affect the
      result of an experiment.

- key: console
  en:
    term: "console"
    def: >
      An interactive pane in an [IDE](#ide) where users can evaluate expressions
      or issue commands.

- key: ci
  en:
    term: "continuous integration"
    def: >
      A system that merges and tests changes automatically as soon as they become
      available, typically in a temporary copy of the project.

- key: control_group
  ref:
  - treatment_group
  en:
    term: "control group"
    def: >
      In experimental design, the subject that *don't* receive a treatment.

- key: conways_law
  en:
    term: "Conway's Law"
    def: >
      States that [the structure of an application reflects the structure of the
      organization that produced it][conways-law].

- key: utc
  en:
    term: "Coordinated Universal Time"
    def: >
      The standard time against which all others are defined. UTC is the time at
      longitude 0°, and is not adjusted for daylight savings.
      [Timestamps](#timestamp) are often reported in UTC so that they will be
      the same no matter what timezone the computer is in.
    acronym: UTC

- key: copyright
  en:
    term: "copyright"
    def: >
      A form of [intellectual property](#intellectual_property) that grants the
      holder special rights (such as exclusive use) to a creative work.

- key: critical_mass
  en:
    term: "critical mass"
    def: >
      The number of people needed in order for a [community of
      practice](#community_of_practice) to become self-perpetuating.

- key: xss
  en:
    term: "cross-site scripting attack"
    def: >
      An attack in which malicious scripts are put in web pages in order to be
      run in the target's browser.  For example, a comment on a message forum
      could include JavaScript that sends the viewer's personal information to
      the attacker.
    acronym: XSS

- key: crunch_mode
  en:
    term: "crunch mode"
    def: >
      To work long hours with little sleep under deadline pressure.  It
      inevitably makes matters worse, since the time needed to fix mistakes
      is greater than the number of extra hours worked.

- key: css_selector
  en:
    term: "CSS selector"
    def: >
      A pattern that identifies nodes in a [DOM](#dom) tree.

- key: curly_brace_language
  en:
    term: "curly-brace language"
    def: >
      A language that uses the same syntactic conventions as C, typically
      including `{...}` to show code blocks and update operators like `+=`.

- key: dark_matter_developer
  en:
    term: "dark matter developer"
    def: >
      The majority of developers who are effectively invisible because they
      don't radiate information though social media or by participating in open
      source projects.  The term was [first used][hanselman-dark-matter] by
      [Scott Hanselman][hanselman-scott].

- key: data_mining
  en:
    term: "data mining"
    def: >
      The use of computers to search for patterns in large datasets.

- key: dead_code
  en:
    term: "dead code"
    def: >
      A section of code that is never executed in any run of the program.  Dead
      code is typically code that *was* needed at some point, but has been left
      in after it is no longer used because nobody is sure they can take it out.

- key: decentralized_system
  en:
    term: "decentralized system"
    def: >
      A system that doesn't have a single controller or central authority like a
      [centralized system](#centralized_system).  Decentralized systems are more
      robust and more scalable, but harder to build.

- key: decision_meeting
  en:
    term: "decision meeting"
    def: >
      A meeting whose purpose is to make binding decisions.  The term is used in
      contrast with [discussion meeting](#discussion_meeting).

- key: defensive_programming
  en:
    term: "defensive programming"
    def: >
      A set of programming practices that assumes mistakes will happen and either
      reports or corrects them, such as inserting [assertions](#assertion) to report
      situations that are not ever supposed to occur.

- key: delta_debugging
  en:
    term: "delta debugging"
    def: >
      A process that automatically tests subsets of the original [test
      fixture](#fixture), then subsets of those subsets, to produce a minimal
      failure-inducing case.

- key: design_by_contract
  en:
    term: design by contract
    def: >
      A style of designing software in which functions specify the
      [pre-conditions](#pre_condition) that must be true in order for them to run
      and the [post-conditions](#post_condition) they guarantee will be true when
      they return. A function can then be replaced by one with weaker
      pre-conditions (i.e., it accepts a wider set of input) and/or stronger
      post-conditions (i.e., it produces a smaller range of output) without
      breaking anything else.

- key: design_for_test
  en:
    term: "design for test"
    def: >
      An approach to system design that focuses on making individual components
      and overall behavior as easy to test as possible.

- key: design_pattern
  en:
    term: design pattern
    def: >
      A recurring pattern in software design that is specific enough to be worth
      naming, but not so specific that a single best implementation can be
      provided by a library.

- key: development_process
  en:
    term: "development process"
    def: >
      A method for dividing the work needed in a software project into pieces
      and allocating those pieces to individuals.

- key: devops
  en:
    term: "DevOps"
    def: >
      A set of software development, deployment, and management practices
      intended to shorten the development cycle and make it more reliable.

- key: diagnostic_power
  en:
    term: "diagnostic power"
    def: >
      The degree to which a wrong answer to a question or exercise tells the
      teacher what misconceptions a particular learner has.

- key: dictionary_attack
  en:
    term: "dictionary attack"
    def: >
      An attack that uses a known set of words to try and guess passwords.

- key: digital_signature
  en:
    term: "digital signature"
    def: >
      A method that uses cryptographic techniques to establish the authenticity
      of a document.

- key: discoverability
  en:
    term: "discoverability"
    def: >
      The ease with which something can be found or stumbled upon.

- key: discussion_meeting
  en:
    term: "discussion meeting"
    def: >
      A meeting whose purpose is to share ideas or explore design alternatives.
      The term is used in contrast with [decision meeting](#decision_meeting).

- key: doc_comment
  en:
    term: "doc comment"
    def: >
      A specially-formatted comment containing documentation about a piece of
      code that is embedded in the code itself.

- key: docstring
  en:
    term: "docstring"
    def: >
      Short for "documentation string", a string appearing at the start of a
      module, class, or function in Python that automatically becomes that
      object's documentation.

- key: dom
  en:
    term: "Document Object Model"
    def: >
      A standard in-memory representation of HTML and XML.
    acronym: DOM

- key: doc_generator
  en:
    term: "documentation generator"
    def: >
      A software tool that extracts specially-formatted comments or
      [dostrings](#docstring) from code and generates cross-referenced developer
      documentation.

- key: dry
  en:
    term: "Don't Repeat Yourself"
    def: >
      A software design principle that states that every piece of knowledge in a
      system is represented once and only once.
    acronym: DRY

- key: double_blind
  en:
    term: "double blind"
    def: >
      An experimental procedure designed to avoid bias by ensuring that neither
      the experimenter nor the subject knows whether someone is in the [control
      group](#control_group) or [treatment group](#treatment_group).

- key: dumpster_diving
  en:
    term: "dumpster diving"
    def: >
      Searching through garbage in order to find items of value.

- key: dynamic_analysis
  ref:
  - static_analysis
  en:
    term: "dynamic analysis"
    def: >
      To analyze the state of a running program in order to determine its
      general properties and/or to find bugs.

- key: dynamic_typing
  en:
    term: "dynamic typing"
    def: >
      Checking the types of values as the program is running.  The term is used
      in contrast with [static typing](#static_typing).

- key: effort_importance_grid
  en:
    term: "effort-importance grid"
    def: >
      A project planning tool that classifies work items according to how much
      effort they will require and how important they are.

- key: elevator_pitch
  en:
    term: "elevator pitch"
    def: >
      A short description of an idea, project, product, or person that can be
      delivered and understood in just a few seconds.

- key: embedded_database
  en:
    term: "embedded database"
    def: >
      A database that runs inside the user's application as a library rather
      than as an external service.

- key: er_diagram
  en:
    term: "entity-relationship diagram"
    def: >
      A graphical representation of the things represented in a database and how
      they relate to each other.

- key: exception
  en:
    term: "exception"
    def: >
      An error or unusual event in a program or an object that stores
      information about . One part of a program will create and [raise an
      exception](#raise_exception) to signal that something unexpected has
      happened; another part will [catch](#catch_exception) it.

- key: expected_result
  ref:
    - actual_result
  en:
    term: "expected result (of test)"
    def: >
      The value that a piece of software is supposed to produce when tested in a
      certain way, or the state in which it is supposed to leave the system.

- key: expert
  ref:
  - competent_practitioner
  - novice
  en:
    term: "expert"
    def: >
      Someone who can diagnose and handle unusual situations, knows when the
      usual rules do not apply, and tends to recognize solutions rather than
      reasoning to them.

- key: expert_blind_spot
  en:
    term: "expert blind spot"
    def: >
      The inability of experts to empathize with novices who are encountering
      concepts or practices for the first time because they have forgotten what
      it's like to *not* know something.

- key: external_error
  en:
    term: "external error"
    def: >
      An error caused by something outside a program, such as trying to
      open a file that doesn't exist.

- key: extraneous_load
  en:
    term: "extraneous load"
    def: >
      Any [cognitive load](#cognitive_load) that distracts from learning.

- key: failure
  en:
    term: "failure"
    def: >
      The noticeable sign that something is wrong with an application.

- key: fault
  ref:
  - root_cause
  en:
    term: "fault"
    def: >
      The underlying cause of a [failure](#failure) in software.

- key: feature_boxing
  ref:
  - time_boxing
  en:
    term: "feature boxing"
    def: >
      A project management technique in which the scope of the change is fixed
      and the time needed is allowed to vary.

- key: feature_creep
  en:
    term: "feature creep"
    def: >
      Expansion of the scope of a project (e.g., the addition of new features)
      while work is ongoing.  It usually leads to delays in release and to the
      software becoming less stable and less comprehensible.

- key: feature_decomposition
  ref:
  - chaotic_decomposition
  - functional_decomposition
  - rotating_decomposition
  en:
    term: "feature decomposition"
    def: >
      To divide work between team members by making each person responsible for
      all aspects of one feature at a time.  Feature decomposition is a
      fine-grained alternative to [modular decomposition](#modular_decomposition).

- key: feigning_ignorance
  en:
    term: "feigning ignorance"
    def: >
      To pretend not to know something.  People who have broken rules will
      sometimes pretend not to have known that the rule existed.

- key: feigning_surprise
  en:
    term: "feigning surprise"
    def: >
      To pretend to be surprised, as in, "Oh, I thought *everyone* knew about X."
      It isn't always intended to belittle the listener, but it usually has that
      effect.

- key: fidelity
  en:
    term: "fidelity"
    def: >
      The degree to which a test captures the key features of the actual system.
      If components of the system have been replaced for testing purposes, or
      if long delays are replaced with short ones so that tests will run
      quickly, the test's fidelity may be compromised.

- key: fsm
  en:
    term: "finite state machine"
    def: >
      A model of computation consisting of a fixed set of states and a set of
      transitions allowed between them.  An FSM has no memory of how it got to a
      state, which means there are many computations FSMs cannot do.
    acronym: FSM

- key: fixture
  en:
    term: "fixture"
    def: >
      The thing on which a test is run.

- key: flow
  en:
    term: "flow"
    def: >
      A mental state in which someone feels completely immersed in a task.

- key: fork_git
  en:
    term: "fork"
    def: >
      To make a new copy of a version control [repository](#repository), or the
      copy that is made.

- key: formative_assessment
  en:
    term: "formative assessment"
    def: >
      Assessment that takes place during a lesson in order to give both the
      learner and the teacher feedback on actual understanding.

- key: functional_decomposition
  ref:
  - chaotic_decomposition
  - feature_decomposition
  - modular_decomposition
  en:
    term: "functional decomposition"
    def: >
      To divide work between team members by making each person responsible for
      a particular set of tasks.  For example, one person could be responsible
      for doing all the testing.  With [rotating
      decomposition](#rotating_decomposition), each person's set of tasks
      changes over time.

- key: fmri
  en:
    term: "functional magnetic resonance imaging"
    def: >
      A way to measure activity in different parts of the brain by detecting
      changes associated with blood flow.
    acronym: fMRI

- key: fuzz_testing
  en:
    term: "fuzz testing"
    def: >
      A software testing technique that sends randomized inputs to a system.

- key: generational_garbage_collection
  en:
    term: "generational garbage collection"
    def: >
      An automatic memory management technique that improves performance by
      relying on the fact that recently-created objects are more likely to be
      recyclable than long-lived ones.

- key: germane_load
  en:
    term: "germane load"
    def: >
      The [cognitive load](#cognitive_load) required to link new information to
      old.

- key: gpl
  en:
    term: "GNU Public License"
    def: >
      An open software license that requires people to share the source code of
      changes or extensions they make.

- key: gqm
  en:
    term: "goal-question-metric"
    def: >
      A goal-oriented way to collect data defined in terms of overall goals
      (i.e., what we seek to change), questions whose answers will help us
      achieve those goals, and measurements that will help us answer those
      questions.
    acronym: GQM

- key: governance
  en:
    term: "governance"
    def: >
      The process of governing, or the set of rules by which something is
      governed.  The governance of a software project establishes who is allowed
      to make what decisions and how.

- key: gui_designer
  en:
    term: "GUI designer"
    def: >
      A software tool that allows users to draw a program's interface, and which
      then generates some or all of the code that implements that interface.

- key: heuristic
  en:
    term: "heuristic"
    def: >
      A rule that isn't guaranteed to solve a problem, but which frequently
      produces a good or good enough solution.

- key: hippocratic_license
  en:
    term: "Hippocratic License"
    def: >
      A software license that allows people to use and share software so long
      as they [do not violate human rights][hippocratic-license].

- key: hitchhiker
  en:
    term: "hitchiker"
    def: >
      Someone who takes credit for a project without actually doing their share
      of the work.

- key: hot_spot
  en:
    term: "hot spot"
    def: >
      A short section of a program that accounts for a large proportion of its
      running time.

- key: hr
  en:
    term: "Human Resources"
    def: >
      The group within a company responsible for hiring, firing, benefits,
      career development, and other people-related tasks.  It used to be called
      the personnel department, and some tech companies now refer to it as
      "people ops".

- key: hypercorrection_effect
  en:
    term: "hypercorrection_effect"
    def: >
      The more strongly someone believed that their answer on a test was right,
      the more likely they are not to repeat the error once they discover that in
      fact they were wrong.

- key: implicit_bias
  en:
    term: "implicit bias"
    def: >
      A prejudice in favor of or against something or someone that a person is
      not consciously aware of.

- key: in_memory_database
  en:
    term: "in-memory database"
    def: >
      A database that stores data in memory rather than on disk.  In-memory
      databases are frequently used for testing, or are backed up by on-disk
      databases.

- key: insider_threat
  en:
    term: "insider threat"
    def: >
      A threat in which the attacker already has access to privileged
      information or critical systems because of their job or other role.

- key: ide
  en:
    term: "Integrated Development Environment"
    def: >
      An application that helps programmers develop software. IDEs typically have
      a built-in editor, a [console](#console) to execute code immediately, and
      browsers for exploring data structures in memory and files on disk.
    acronym: IDE

- key: intellectual_property
  en:
    term: "intellectual property"
    def: >
      Something produced by thinking that people can claim ownership of.
      Intellectual property generally includes [copyrights](#copyright),
      [patents](#patent), [trademarks](#trademark), and [trade
      secrets](#trade_secret).

- key: internal_error
  en:
    term: "internal error"
    def: >
      An error caused by a fault in a program, such as trying to access elements
      beyond the end of an array.

- key: interpreted_language
  en:
    term: interpreted language
    def: >
      A high-level language that is not executed directly by the computer, but
      instead is run by an [interpreter](#interpreter) that translates program
      instructions into machine commands on the fly.

- key: interpreter
  en:
    term: interpreter
    def: >
      A program whose job it is to run programs written in a high-level
      [interpreted language](#interpreted_language). Interpreters can run
      interactively, but may also execute commands saved in a file.

- key: intimate_threat
  en:
    term: "intimate threat"
    def: >
      A threat in which the attacker has access to privileged information or
      critical systems because of their personal relationship with the target.

- key: intrinsic_load
  en:
    term: "intrinsic load"
    def: >
      The [cognitive load](#cognitive_load) required to absorb new information.

- key: issue_tracker
  en:
    term: "issue tracker"
    def: >
      An application that manages a list of issues related to one or more
      projects.  Issues represent things such as bug reports and feature
      requests; they may be in several states (such as "verified" or "under
      development"), and they may or may not be assigned to specific people.

- key: json
  ref:
  - yaml
  en:
    term: JavaScript Object Notation
    def: >
      A way to represent data by combining basic values like numbers and
      character strings in lists and key/value structures. The acronym stands
      for "JavaScript Object Notation"; unlike better-defined standards like
      XML, it is unencumbered by a syntax for comments or ways to define a
      [schema](#schema).
    acronym: JSON

- key: jit
  en:
    term: "just-in-time compiler"
    def: >
      A compiler that runs as the program is running.  JITs typically rely on
      [profiling](#profiler) to identify [hot spots](#hot_spot) that are worth
      optimizing.
    acronym: JIT

- key: issue_label
  en:
    term: "label (an issue)"
    def: >
      A short tag associated with an issue to categorize it. Common labels
      include `bug` and `feature request`.

- key: layered_configuration
  en:
    term: "layered configuration"
    def: >
      A technique for configuring programs in which several layers of
      configuration are used, each overriding settings in the ones before.

- key: lpp
  en:
    term: legitimate peripheral participation
    def: >
      Doing small tasks that a [community of practice](#community_of_practice)
      regards as valuable in order to gradually become a member of that
      community.

- key: lending_privilege
  en:
    term: "lending privilege"
    def: >
      To use one's status or advantages to benefit others, e.g., by promoting
      the work of someone who is less well known or by using one's status to
      defend someone who is the target of harassment.

- key: license
  en:
    term: "license"
    def: >
      Something that specifies the conditions under which something else may
      be used.

- key: linter
  en:
    term: "linter"
    def: >
      Another term for a [style checker](#style_checker).  The name comes from
      an early tool called `lint` that looked for problems in C programs.

- key: logging
  en:
    term: "logging"
    def: >
      Recording information about the execution of a program in a structured
      way for later analysis.

- key: long_tail
  en:
    term: "long tail"
    def: >
      A part of a statistical distribution that has a wide span but only a few
      members.

- key: long_term_memory
  en:
    term: "long-term memory"
    def: >
      The part of memory that stores information for long periods of
      time. Long-term memory is large, but slow, and cannot be accessed
      directly.
    acronym: LTM
  ref:
  - short_term_memory

- key: magic_number
  en:
    term: magic number
    def: >
      An arbitrary value in code that could be replaced by a named constant.

- key: mail_filter
  en:
    term: mail filter
    def: >
      Software that classifies email messages and/or automatically places them
      in specific folders based on origin or content.

- key: markdown
  en:
    term: Markdown
    def: >
      A markup language with a simple syntax intended as a replacement for HTML.

- key: marketing
  en:
    term: marketing
    def: >
      Making people aware that something exists or that they might find it
      useful or interesting.

- key: marthas_rules
  en:
    term: "Martha's Rules"
    def: >
      A simple set of rules for making decisions in small groups.

- key: mental_model
  en:
    term: "mental model"
    def: >
      A simplified representation of the key elements and relationships of some
      problem domain that is good enough to support problem solving.

- key: merge_git
  en:
    term: "merge"
    def: >
      To combine changes from two [branches](#branch_git) in a
      [repository](#repository). This may lead to [conflicts](#conflict_git).

- key: microservice
  en:
    term: "microservice"
    def: >
      A program devoted to one task that interacts with other parts of an
      application by communicating with them (e.g., through HTTP) rather than as
      a library.

- key: milestone
  en:
    term: "milestone"
    def: >
      A target that a project is trying to meet, often represented as a set of
      issues that all have to be resolved by a certain time.

- key: mit_license
  en:
    term: "MIT License"
    def: >
      An open software license that requires people to acknowledge the source of
      the software, but does not require derived work to be open; legally
      equivalent to the [BSD License](#bsd_license).

- key: mock_object
  en:
    term: mock object
    def: >
      A simplified replacement for part of a program whose behavior is easy to
      control and predict. Mock objects are used in [unit tests](#unit_test) to
      simulate databases, web services, and other complex systems.

- key: model
  en:
    term: "model"
    def: >
      An abstract representation of the states a program is allowed to be in or
      the operations it is supposed to be able to do.  Models are typically used
      to define "what", while code defines "how".

- key: mvc
  en:
    term: "model-view-controller"
    def: >
      A widely-used application architecture consisting of a data model, a set
      of displays that reflect its state and allow user interaction, and the
      [business rules](#business_rule) that determine what operations are
      allowed.
    acronym: MVC

- key: modular_decomposition
  ref:
  - chaotic_decomposition
  - functional_decomposition
  - rotating_decomposition
  en:
    term: "modular decomposition"
    def: >
      To divide work among team members by making each person responsible for
      all aspects of work on one entire module.  Modular decomposition is a
      coarse-grained alternative to [feature decomposition](#feature_decomposition).

- key: myers_briggs
  en:
    term: "Myers-Briggs Type Indicator"
    def: >
      See [bullshit](#bullshit).
    acronym: MBTI

- key: neurodivergent
  en:
    term: "neurodivergent"
    def: >
      Someone whose brain works differently from the average when it comes to
      sociability, learning, attention, and mood. The term is used in contrast
      with [neurotypical](#neurotypical).

- key: neurotypical
  en:
    term: "neurotypical"
    def: >
      Someone near the middle of the bell curve with respect to sociability,
      learning, attention, and mood. The term is used in contrast with
      [neurodivergent](#neurodivergent).

- key: non_disclosure_agreement
  en:
    term: "non-disclosure agreement"
    def: >
      A legal agreement that forbids one or both parties from making certain
      information public.  NDAs have legitimate uses, such as preventing
      ex-employees from sharing [trade secrets](#trade_secret), but businesses
      often use them to prevent disclosure of wrongdoing such as discriminatory
      hiring practices or sexual harassment.
    acronym: NDA

- key: nih
  ref:
  - aih
  en:
    term: "not invented here syndrome"
    def: >
      The tendency to avoid using things created by others in favor of using
      things built internally.
    acronym: NIH

- key: novice
  ref:
  - competent_practitioner
  - expert
  en:
    term: "novice"
    def: >
      Someone who has not yet built a usable mental model of a domain and
      therefore struggles with even basic tasks.

- key: ocean_model
  en:
    term: "OCEAN model"
    def: >
      A model of personality whose five dimensions are Openness to experience,
      Conscientiousness, Extraversion, Agreeableness, and Neuroticism.  Unlike
      [Myers-Briggs](#myers_briggs), the OCEAN model has a solid scientific
      basis.

- key: open_license
  en:
    term: "open license"
    def: >
      A [license](#license) that allows people to re-use work, possibly with
      some restrictions.  The [MIT License](#mit_license) is an open software
      license, while the [CC-BY](#cc_by) license is often used for written work.

- key: open_closed_principle
  en:
    term: Open-Closed Principle
    def: >
      A design rule stating that software should be open for extension but
      closed for modification, i.e., it should be possible to extend
      functionality without having to rewrite existing code.

- key: package_manager
  en:
    term: "package manager"
    def: >
      A program that keeps track of the software packages installed on a
      computer and their dependencies on one another.  Most languages have their
      own package manager, which complicates multi-lingual projects.

- key: package_manifest
  en:
    term: "package manifest"
    def: >
      A machine-readable file specifying the contents of a software package, its
      dependencies, and other information.

- key: pair_programming
  en:
    term: "pair programming"
    def: >
      A software development technique in which two people work on a single
      machine simultaneously.  One person (the "driver") does the typing while
      the other (the "navigator") provides real-time feedback; the two swap
      roles periodically.  Pair programming is sometimes called an
      [agile](#agile) practice, but predates agile development by decades.

- key: patch
  en:
    term: "patch"
    def: >
      An update to an already-installed library or application.

- key: patent
  en:
    term: "patent"
    def: >
      A form of [intellectual property](#intellectual_property) that gives an
      inventor exclusive right to use that invention for a fixed period of time.

- key: path_coverage
  en:
    term: "path coverage"
    def: >
      The fraction of possible execution paths in a piece of software
      that have been executed by tests. Software can have complete
      [code coverage](#code_coverage) without having complete path
      coverage.

- key: pattern_rule
  en:
    term: "pattern rule"
    def: >
      A generic rule for a [build manager](#build_manager) that describes how to
      update any file whose name matches a pattern.

- key: phishing
  ref:
  - spearphishing
  en:
    term: "phishing"
    def: >
      An attack in which someone pretends to represent a legitimate
      organization, e.g., by sending an email that appears to come from an
      actual bank or university.

- key: placebo
  en:
    term: "placebo"
    def: >
      An inactive ingredient or non-treatment used in an experiment to
      establish a baseline for a [control group](#control_group).

- key: plugin
  en:
    term: "plugin"
    def: >
      An optional add-on module for a program or library that provides
      extra functionality.  Plugins are typically distributed separately from
      the main application.

- key: post_commit_hook
  en:
    term: post-commit hook
    def: >
      Code that is automatically run after a change is committed to a version
      control repository, e.g., to deploy the latest version of the software.

- key: post_condition
  en:
    term: post-condition
    def: >
      Something that is guaranteed to be true after a function runs
      successfully. Post-conditions are used in [design by
      contract](#design_by_contract) and are often expressed as assertions that
      are guaranteed to be true of a function's result.

- key: post_mortem
  en:
    term: "post-mortem"
    def: >
      A retrospective analysis of what went right or wrong during a project.

- key: pre_commit_hook
  en:
    term: pre-commit hook
    def: >
      Code that is automatically run before a change is committed to a version
      control repository, e.g., to check that tests pass or that the software
      conforms to style guidelines.

- key: pre_condition
  en:
    term: pre-condition
    def: >
      Something that is guaranteed to be true after a function runs
      successfully. Pre-conditions are used in [design by
      contract](#design_by_contract) and are often expressed as assertions that
      must be true of a function's inputs in order for it to run successfully.

- key: pre_registration
  en:
    term: "pre-registration"
    def: >
      Depositing a research question or study design before starting an
      experiment to ensure that the goalposts aren't moved to fit the data
      that becomes available.

- key: preparatory_privilege
  en:
    term: "preparatory privilege"
    def: >
      The advantage someone has in an supposedly objective assessment because
      they had opportunities earlier in life that other people didn't.

- key: product_manager
  en:
    term: "product manager"
    def: >
      The person responsible for defining what features a product should have.

- key: profiler
  en:
    term: "profiler"
    def: >
      A tool that records how much time a program spends where when it runs.

- key: project_manager
  en:
    term: "project manager"
    def: >
      The person responsible for ensuring that a project moves forward.

- key: pull_git
  en:
    term: "pull"
    def: >
      To down changes from a remote [repository](#repository) to a local one.

- key: pull_request
  en:
    term: "pull request"
    def: >
      A request to merge changes from one [repository](#repository) into another.

- key: push_git
  en:
    term: "push"
    def: >
      To upload changes from a local [repository](#repository) to a remote one.

- key: qualitative_method
  ref:
    - quantitative_method
  en:
    term: "qualitative method"
    def: >
      A research method based on closed analysis of non-numerical data.

- key: quantitative_method
  ref:
    - qualitative_method
  en:
    term: "quantitative method"
    def: >
      A research method based on statistical analysis of numerical data.

- key: quasi_experiment
  en:
    term: "quasi-experiment"
    def: >
      An empirical study that does *not* assign subjects to groups at random.
      Many quasi-experiments study people who have self-selected into groups,
      e.g., compares those who have chosen to use X with those who have chosen
      not to.

- key: rabbit_hole
  en:
    term: "rabbit hole"
    def: >
      A colloquial expression referring to the entrance to a strange world.
      The term refers to the novel *Alice in Wonderland*.

- key: raise_exception
  ref:
    - throw_exception
  en:
    term: "raise (an exception)"
    def: >
      To signal that something unexpected or unusual has happened in a program,
      which can [catch](#catch_exception) it and handle it (or not).

- key: raster_image
  en:
    term: "raster image"
    def: >
      An image stored as a matrix of pixels.

- key: rebase_git
  en:
    term: "rebase"
    def: >
      To rewrite the history of a version control [repository](#repository),
      usually to collapse several consecutive [commits](#commit) into one.

- key: refactoring
  en:
    term: "refactoring"
    def: >
      Reorganizing software without changing its behavior.

- key: remote_git
  en:
    term: "remote"
    def: >
      A [repository](#repository) located on another computer, or a bookmark
      in one project that points at such a repository.

- key: repository
  en:
    term: "repository"
    def: >
      A place where a version control system stores the files that make up a
      project and the metadata that describes their history.

- key: rest
  en:
    term: "Representational State Transfer"
    def: >
      A software design strategy in which components communicate using a
      subset of HTTP to create, read, update, and delete data.
    acronym: REST

- key: reprex
  en:
    term: "reproducible example (reprex)"
    def: >
      A small, self-contained example of a problem.

- key: requirements_error
  en:
    term: "requirements error"
    def: >
      An error in defining what to build or how the system should operate.
      Requirements errors often result in programmers building a correct
      implementation of the wrong thing.

- key: root_cause
  en:
    term: "root cause"
    def: >
      The [fault](#fault) that originally caused one or more
      [failures](#failure).  The term is used to distinguish the original
      problem from those triggered by it.

- key: rotating_decomposition
  ref:
  - chaotic_decomposition
  - feature_decomposition
  - modular_decomposition
  en:
    term: "rotating decomposition"
    def: >
      A variation on [functional decomposition](#functional_decomposition) in
      which each person is responsible for one set of tasks at a time, but team
      members swap responsibilities periodically.

- key: rotating_file
  en:
    term: "rotating file"
    def: >
      A set of files used to store recent information. For example, there might be
      one file with results for each day of the week, so that results from last
      Tuesday are overwritten this Tuesday.

- key: sanitizing_data
  en:
    term: "sanitizing data"
    def: >
      Modifying data (particularly data supplied by an untrusted user) to remove
      special characters or other potential security problems.

- key: schema
  en:
    term: "schema"
    def: >
      A specification of the format and contents of a particular dataset.

- key: schrodingers_asshole
  en:
    term: "Schrödinger's Asshole"
    def: >
      Someone who makes an offensive remark and then decides whether or not they
      were joking based on the responses of the listeners.

- key: scottish_verdict
  en:
    term: "Scottish verdict"
    def: >
      A declaration that something hasn't been proved one way or another.

- key: scriptable
  en:
    term: "scriptable"
    def: >
      Used to describe an application whose users can control by writing small
      programs that make use of the underlying program's internal APIs.

- key: scrum
  en:
    term: "Scrum"
    def: >
      A particular kind of [agile](#agile) development that relies on short
      sprints (typically a week or two in length), each of which ends with
      delivery of working software.

- key: security_theater
  en:
    term: "security theater"
    def: >
      Doing things that give the impression they are making a system more
      secure but which don't actually have any impact.  The term was coined
      by [Bruce Schneier][schneier-bruce] to describe things like requiring
      passengers to remove their shoes before boarding a plane.

- key: semantic_versioning
  en:
    term: "semantic versioning"
    def: >
      A standard for identifying software releases. In the version identifier
      `major.minor.patch`, `major` changes when a new version of software is
      incompatible with old versions, `minor` changes when new features are added
      to an existing version, and `patch` changes when small bugs are fixed.

- key: sense_vote
  en:
    term: "sense vote"
    def: >
      A preliminary vote used to determine whether further discussion is needed in a meeting.

- key: short_term_memory
  en:
    term: "short-term memory"
    def: >
      The part of memory that briefly stores small amounts of information that can
      be directly accessed by consciousness.
    acronym: STM
  ref:
  - long_term_memory

- key: social_engineering
  en:
    term: "social engineering"
    def: >
      Exploiting people's behavior to attack a software system, e.g., tricking
      someone into revealing their password instead of cracking it.

- key: sociotechnical_congruence
  en:
    term: "sociotechnical congruence"
    def: >
      The alignment between the social structure of an organization and the
      architecture of the software it uses or builds.

- key: software_portal
  en:
    term: "software portal"
    def: >
      A web-based application for coordinating work on software projects.
      Portals such as [Bitbucket][bitbucket], [GitHub][github], and
      [GitLab][gitlab] provide [issue trackers](#issue_tracker) and host
      version control [repositories](#repository).

- key: spearphishing
  en:
    term: "spearphishing"
    def: >
      A [phishing](#phishing) attack in which the attacker uses information
      gained from previous attacks or other targets to selectively target
      individuals.

- key: sprint
  en:
    term: "sprint"
    def: >
      A short [time-boxed](#time_boxing) period of work on a software project,
      typically from a day to a couple of weeks long.

- key: sql_injection
  en:
    term: "SQL injection attack"
    def: >
      An attack on an application in which the attacker's text is formatted as
      one or more SQL queries.  When that input is copied directly into a
      database query, the attacker is able to extract or delete data.

- key: stand_up_meeting
  en:
    term: "stand-up meeting"
    def: >
      A brief status meeting in which project members report what they've done,
      what they're planning to do, and what's in their way.  Stand-up meetings
      are a common practice in [agile](#agile) development.

- key: state_level_actor
  en:
    term: "state-level actor"
    def: >
      An entity with the resources of a government.  There is little the average
      person can do to safeguard against attacks by state-level actors;
      unfortunately, that category now includes many companies as well.

- key: static_analysis
  ref:
  - dynamic_analysis
  en:
    term: "static analysis"
    def: >
      To analyze the source code of a program in order to determine its general
      properties and/or to find bugs.

- key: static_site_generator
  en:
    term: "static site generator"
    def: >
      A program that creates HTML pages from templates and content.

- key: static_typing
  en:
    term: "static typing"
    def: >
      Checking the types of values before a program runs to ensure that they
      will be valid.  The term is used in contrast with [dynamic
      typing](#dynamic_typing).

- key: straw_man
  en:
    term: "straw man"
    def: >
      An argument or opponent chosen because it can easily be defeated.

- key: string_io
  en:
    term: "string I/O"
    def: >
      Input and output operations that read and write text in memory rather than
      files on disk.

- key: style_checker
  en:
    term: "style checker"
    def: >
      See [linter](#linter).

- key: symbolic_debugger
  ref:
  - breakpoint
  en:
    term: "symbolic debugger"
    def: >
      A program that allows the user to step through the execution of another
      program and view the contents of memory using the same variable names and
      expressions used in that program's source code.

- key: team_contract
  en:
    term: "team contract"
    def: >
      A written agreement between members of a team about how that team will
      operate and what's expected of each member.

- key: technical_debt
  en:
    term: "technical debt"
    def: >
      The additional work that has piled up because of earlier design
      compromises, changing circumstances, and/or bugs that have not yet been
      addressed.

- key: test_framework
  en:
    term: "test framework"
    def: >
      See [test runner](#test_runner).

- key: test_runner
  en:
    term: "test runner"
    def: >
      A program that finds and runs software tests and reports their results.

- key: test_suite
  en:
    term: "test suite"
    def: >
      A set of related [unit tests](#unit_test), usually stored in files that
      follow a prescribed naming convention.

- key: tdd
  en:
    term: "test-driven development"
    def: >
      A programming practice in which tests are written before a new feature is
      added or a bug is fixed in order to clarify the goal.
    acronym: TDD

- key: throw_exception
  en:
    term: "throw (an exception)"
    def: >
      Another term for [raising](#raise_exception) an exception.

- key: time_boxing
  ref:
  - feature_boxing
  en:
    term: "time boxing"
    def: >
      A project management technique in which the length of time is fixed and
      the scope of the work is allowed to vary.

- key: timestamp
  en:
    term: "timestamp"
    def: >
      A digital identifier showing the time at which something was created or
      accessed.

- key: to_dont_list
  en:
    term: "to-don't list"
    def: >
      A list of things that are worth doing, but which the list-maker has
      decided they aren't going to start; the opposite of a to-do list.

- key: tone_policing
  en:
    term: "tone policing"
    def: >
      To criticize someone for expressing emotion during a discussion.  Tone
      policing is often used to undermine arguments made by women or members of
      marginalized racial groups, e.g., by dismissing reports of their personal
      experience as "hysterical".

- key: trade_secret
  en:
    term: "trade secret"
    def: >
      A formula, business process, design, or other information that is not
      divulged publicly in order to give the holder a business advantage.  Trade
      secrets are a form of [intellectual property](#intellectual_property).

- key: trademark
  en:
    term: "trademark"
    def: >
      A form of [intellectual_property](#intellectual_property) that gives the
      holder the exclusive right to use a name or symbol.

- key: treatment_group
  ref:
  - control_group
  en:
    term: "treatment group"
    def: >
      In experimental design, the subjects that receive some treatment or
      stimulus.  If there are no significant differences between members of the
      control group and members of the [treatment group](#treatment_group), the
      experimenter should conclude that the treatment has no effect.

- key: triage
  en:
    term: "triage"
    def: >
      To go through the issues associated with a project and decide which
      are currently priorities. Triage is one of the key responsibilities of a
      [project manager](#project_manager).

- key: 2fa
  en:
    term: "two-factor authentication"
    def: >
      A security system that requires people to provide two different proofs of
      identify, such as knowing a password and being able to receive messages
      sent to a particular email address.
    acronym: 2FA

- key: type_declaration
  en:
    term: "type declaration"
    def: >
      An annotation in a program stating that a variable may only contain or
      refer to values of a particular data type.

- key: uml
  en:
    term: "Unified Modeling Language"
    def: >
      A set of graphical notations for modeling object-oriented systems.
    acronym: UML

- key: unit_test
  en:
    term: "unit test"
    def: >
      A test that exercises one function or feature of a piece of software and
      produces pass, fail, or error.

- key: use_case_map
  en:
    term: "use-case map"
    def: >
      A graphical representation of the interaction between a user and a
      software application that traces the propagation of events through the
      system's [conceptual architecture](#conceptual_architecture).

- key: user_story
  en:
    term: "user story"
    def: >
      An informal description of how someone would use a software application.
      User stories are a lightweight way to specify features and requirements.

- key: version_number
  ref:
  - semantic_versioning
  en:
    term: "version number"
    def: >
      A number or set of numbers that uniquely identify a specific version of a
      piece of software.

- key: virtual_machine
  en:
    term: virtual machine
    def: >
      A program that pretends to be a computer. This may seem a bit redundant,
      but VMs are quick to create and start up, and changes made inside the
      virtual machine are contained within that VM so we can install new
      packages or run a completely different operating system without affecting
      the underlying computer.
    acronym: VM

- key: waterfall_model
  en:
    term: "waterfall model"
    def: >
      A project management method in which requirements gathering, design,
      implementation, testing, and deployment are each done once, to completion,
      in exactly that order.  This process was first described as something that
      couldn't possibly work, but advocates of other processes frequently use it
      as a [straw man](#straw_man).

- key: wysiwyg
  en:
    term: "What You See Is What You Get"
    def: >
      Describes an interface that displays exactly what the finished product
      will look like.  A text editor showing HTML markup is not WYSIWYG; a
      graphical text editor like Microsoft Word is.
    acronym: WYSIWYG

- key: workflow_diagram
  en:
    term: "workflow diagram"
    def: >
      A graphical representation of the steps taken to accomplish a task.

- key: working_memory
  en:
    term: "working memory"
    def: >
      The part of [short-term memory](#short_term_memory) that handles immediate
      conscious perceptual and linguistic processing.

- key: yaml
  en:
    term: YAML
    def: >
      Short for "YAML Ain't Markup Language", a way to represent nested data
      using indentation rather than the parentheses and commas of [JSON](#json).
      YAML is often used in configuration files and to define parameters for
      various flavors of [Markdown](#markdown) documents.
